Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assert expression
Rule 2     expression -> NAME
Rule 3     letexpression -> let NAME ASS expression
Rule 4     letexpression -> letexpression COMMA NAME ASS expression
Rule 5     expression -> letexpression in expression
Rule 6     expression -> expression EQ expression
Rule 7     expression -> ( expression )
Rule 8     expression -> NUMBER
Rule 9     expression -> HEX
Rule 10    expression -> BIN
Rule 11    expression -> expression [ expression COLON expression ]
Rule 12    expression -> expression with [ expression ] COLONEQ expression
Rule 13    expression -> expression [ expression ]
Rule 14    expression -> not expression
Rule 15    expression -> expression AND expression
Rule 16    expression -> expression OR expression
Rule 17    expression -> expression CONCAT expression
Rule 18    expression -> bvlt ( expression COMMA expression )
Rule 19    expression -> bvle ( expression COMMA expression )
Rule 20    expression -> bvgt ( expression COMMA expression )
Rule 21    expression -> bvge ( expression COMMA expression )
Rule 22    expression -> sbvlt ( expression COMMA expression )
Rule 23    expression -> sbvle ( expression COMMA expression )
Rule 24    expression -> sbvgt ( expression COMMA expression )
Rule 25    expression -> sbvge ( expression COMMA expression )
Rule 26    expression -> bvsx ( expression COMMA expression )
Rule 27    expression -> bvplus ( expression COMMA expression COMMA expression )
Rule 28    expression -> bvsub ( expression COMMA expression COMMA expression )
Rule 29    expression -> if expression then expression else expression endif

Terminals, with rules where they appear

(                    : 7 18 19 20 21 22 23 24 25 26 27 28
)                    : 7 18 19 20 21 22 23 24 25 26 27 28
AND                  : 15
ASS                  : 3 4
BIN                  : 10
COLON                : 11
COLONEQ              : 12
COMMA                : 4 18 19 20 21 22 23 24 25 26 27 27 28 28
CONCAT               : 17
EQ                   : 6
HEX                  : 9
NAME                 : 2 3 4
NUMBER               : 8
OR                   : 16
[                    : 11 12 13
]                    : 11 12 13
assert               : 1
bvge                 : 21
bvgt                 : 20
bvle                 : 19
bvlt                 : 18
bvplus               : 27
bvsub                : 28
bvsx                 : 26
else                 : 29
endif                : 29
error                : 
if                   : 29
in                   : 5
let                  : 3
not                  : 14
sbvge                : 25
sbvgt                : 24
sbvle                : 23
sbvlt                : 22
then                 : 29
with                 : 12

Nonterminals, with rules where they appear

expression           : 1 3 4 5 6 6 7 11 11 11 12 12 12 13 13 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 27 28 28 28 29 29 29
letexpression        : 4 5
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assert expression

    assert          shift and go to state 1

    statement                      shift and go to state 2

state 1

    (1) statement -> assert . expression
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 23

state 2

    (0) S' -> statement .



state 3

    (8) expression -> NUMBER .

    COMMA           reduce using rule 8 (expression -> NUMBER .)
    EQ              reduce using rule 8 (expression -> NUMBER .)
    [               reduce using rule 8 (expression -> NUMBER .)
    with            reduce using rule 8 (expression -> NUMBER .)
    AND             reduce using rule 8 (expression -> NUMBER .)
    OR              reduce using rule 8 (expression -> NUMBER .)
    CONCAT          reduce using rule 8 (expression -> NUMBER .)
    )               reduce using rule 8 (expression -> NUMBER .)
    endif           reduce using rule 8 (expression -> NUMBER .)
    in              reduce using rule 8 (expression -> NUMBER .)
    else            reduce using rule 8 (expression -> NUMBER .)
    $end            reduce using rule 8 (expression -> NUMBER .)
    then            reduce using rule 8 (expression -> NUMBER .)
    COLON           reduce using rule 8 (expression -> NUMBER .)
    ]               reduce using rule 8 (expression -> NUMBER .)


state 4

    (22) expression -> sbvlt . ( expression COMMA expression )

    (               shift and go to state 24


state 5

    (29) expression -> if . expression then expression else expression endif
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 25

state 6

    (10) expression -> BIN .

    COMMA           reduce using rule 10 (expression -> BIN .)
    EQ              reduce using rule 10 (expression -> BIN .)
    [               reduce using rule 10 (expression -> BIN .)
    with            reduce using rule 10 (expression -> BIN .)
    AND             reduce using rule 10 (expression -> BIN .)
    OR              reduce using rule 10 (expression -> BIN .)
    CONCAT          reduce using rule 10 (expression -> BIN .)
    )               reduce using rule 10 (expression -> BIN .)
    endif           reduce using rule 10 (expression -> BIN .)
    in              reduce using rule 10 (expression -> BIN .)
    else            reduce using rule 10 (expression -> BIN .)
    $end            reduce using rule 10 (expression -> BIN .)
    then            reduce using rule 10 (expression -> BIN .)
    COLON           reduce using rule 10 (expression -> BIN .)
    ]               reduce using rule 10 (expression -> BIN .)


state 7

    (18) expression -> bvlt . ( expression COMMA expression )

    (               shift and go to state 26


state 8

    (27) expression -> bvplus . ( expression COMMA expression COMMA expression )

    (               shift and go to state 27


state 9

    (24) expression -> sbvgt . ( expression COMMA expression )

    (               shift and go to state 28


state 10

    (7) expression -> ( . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 29

state 11

    (19) expression -> bvle . ( expression COMMA expression )

    (               shift and go to state 30


state 12

    (25) expression -> sbvge . ( expression COMMA expression )

    (               shift and go to state 31


state 13

    (26) expression -> bvsx . ( expression COMMA expression )

    (               shift and go to state 32


state 14

    (23) expression -> sbvle . ( expression COMMA expression )

    (               shift and go to state 33


state 15

    (9) expression -> HEX .

    COMMA           reduce using rule 9 (expression -> HEX .)
    EQ              reduce using rule 9 (expression -> HEX .)
    [               reduce using rule 9 (expression -> HEX .)
    with            reduce using rule 9 (expression -> HEX .)
    AND             reduce using rule 9 (expression -> HEX .)
    OR              reduce using rule 9 (expression -> HEX .)
    CONCAT          reduce using rule 9 (expression -> HEX .)
    )               reduce using rule 9 (expression -> HEX .)
    endif           reduce using rule 9 (expression -> HEX .)
    in              reduce using rule 9 (expression -> HEX .)
    else            reduce using rule 9 (expression -> HEX .)
    $end            reduce using rule 9 (expression -> HEX .)
    then            reduce using rule 9 (expression -> HEX .)
    COLON           reduce using rule 9 (expression -> HEX .)
    ]               reduce using rule 9 (expression -> HEX .)


state 16

    (28) expression -> bvsub . ( expression COMMA expression COMMA expression )

    (               shift and go to state 34


state 17

    (3) letexpression -> let . NAME ASS expression

    NAME            shift and go to state 35


state 18

    (14) expression -> not . expression
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 36

state 19

    (21) expression -> bvge . ( expression COMMA expression )

    (               shift and go to state 37


state 20

    (2) expression -> NAME .

    COMMA           reduce using rule 2 (expression -> NAME .)
    EQ              reduce using rule 2 (expression -> NAME .)
    [               reduce using rule 2 (expression -> NAME .)
    with            reduce using rule 2 (expression -> NAME .)
    AND             reduce using rule 2 (expression -> NAME .)
    OR              reduce using rule 2 (expression -> NAME .)
    CONCAT          reduce using rule 2 (expression -> NAME .)
    )               reduce using rule 2 (expression -> NAME .)
    endif           reduce using rule 2 (expression -> NAME .)
    in              reduce using rule 2 (expression -> NAME .)
    else            reduce using rule 2 (expression -> NAME .)
    $end            reduce using rule 2 (expression -> NAME .)
    then            reduce using rule 2 (expression -> NAME .)
    COLON           reduce using rule 2 (expression -> NAME .)
    ]               reduce using rule 2 (expression -> NAME .)


state 21

    (20) expression -> bvgt . ( expression COMMA expression )

    (               shift and go to state 38


state 22

    (5) expression -> letexpression . in expression
    (4) letexpression -> letexpression . COMMA NAME ASS expression

    in              shift and go to state 40
    COMMA           shift and go to state 39


state 23

    (1) statement -> assert expression .
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    $end            reduce using rule 1 (statement -> assert expression .)
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 24

    (22) expression -> sbvlt ( . expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 47

state 25

    (29) expression -> if expression . then expression else expression endif
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    then            shift and go to state 48
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 26

    (18) expression -> bvlt ( . expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 49

state 27

    (27) expression -> bvplus ( . expression COMMA expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 50

state 28

    (24) expression -> sbvgt ( . expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 51

state 29

    (7) expression -> ( expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 52
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 30

    (19) expression -> bvle ( . expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 53

state 31

    (25) expression -> sbvge ( . expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 54

state 32

    (26) expression -> bvsx ( . expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 55

state 33

    (23) expression -> sbvle ( . expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 56

state 34

    (28) expression -> bvsub ( . expression COMMA expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 57

state 35

    (3) letexpression -> let NAME . ASS expression

    ASS             shift and go to state 58


state 36

    (14) expression -> not expression .
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           reduce using rule 14 (expression -> not expression .)
    EQ              reduce using rule 14 (expression -> not expression .)
    [               reduce using rule 14 (expression -> not expression .)
    with            reduce using rule 14 (expression -> not expression .)
    AND             reduce using rule 14 (expression -> not expression .)
    OR              reduce using rule 14 (expression -> not expression .)
    CONCAT          reduce using rule 14 (expression -> not expression .)
    )               reduce using rule 14 (expression -> not expression .)
    endif           reduce using rule 14 (expression -> not expression .)
    in              reduce using rule 14 (expression -> not expression .)
    else            reduce using rule 14 (expression -> not expression .)
    $end            reduce using rule 14 (expression -> not expression .)
    then            reduce using rule 14 (expression -> not expression .)
    COLON           reduce using rule 14 (expression -> not expression .)
    ]               reduce using rule 14 (expression -> not expression .)

  ! EQ              [ shift and go to state 44 ]
  ! [               [ shift and go to state 43 ]
  ! with            [ shift and go to state 42 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 45 ]
  ! CONCAT          [ shift and go to state 46 ]


state 37

    (21) expression -> bvge ( . expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 59

state 38

    (20) expression -> bvgt ( . expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 60

state 39

    (4) letexpression -> letexpression COMMA . NAME ASS expression

    NAME            shift and go to state 61


state 40

    (5) expression -> letexpression in . expression
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    expression                     shift and go to state 62
    letexpression                  shift and go to state 22

state 41

    (15) expression -> expression AND . expression
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 63

state 42

    (12) expression -> expression with . [ expression ] COLONEQ expression

    [               shift and go to state 64


state 43

    (11) expression -> expression [ . expression COLON expression ]
    (13) expression -> expression [ . expression ]
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 65

state 44

    (6) expression -> expression EQ . expression
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 66

state 45

    (16) expression -> expression OR . expression
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 67

state 46

    (17) expression -> expression CONCAT . expression
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 68

state 47

    (22) expression -> sbvlt ( expression . COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 69
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 48

    (29) expression -> if expression then . expression else expression endif
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 70

state 49

    (18) expression -> bvlt ( expression . COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 71
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 50

    (27) expression -> bvplus ( expression . COMMA expression COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 72
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 51

    (24) expression -> sbvgt ( expression . COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 73
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 52

    (7) expression -> ( expression ) .

    COMMA           reduce using rule 7 (expression -> ( expression ) .)
    EQ              reduce using rule 7 (expression -> ( expression ) .)
    [               reduce using rule 7 (expression -> ( expression ) .)
    with            reduce using rule 7 (expression -> ( expression ) .)
    AND             reduce using rule 7 (expression -> ( expression ) .)
    OR              reduce using rule 7 (expression -> ( expression ) .)
    CONCAT          reduce using rule 7 (expression -> ( expression ) .)
    )               reduce using rule 7 (expression -> ( expression ) .)
    endif           reduce using rule 7 (expression -> ( expression ) .)
    in              reduce using rule 7 (expression -> ( expression ) .)
    else            reduce using rule 7 (expression -> ( expression ) .)
    $end            reduce using rule 7 (expression -> ( expression ) .)
    then            reduce using rule 7 (expression -> ( expression ) .)
    COLON           reduce using rule 7 (expression -> ( expression ) .)
    ]               reduce using rule 7 (expression -> ( expression ) .)


state 53

    (19) expression -> bvle ( expression . COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 74
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 54

    (25) expression -> sbvge ( expression . COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 75
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 55

    (26) expression -> bvsx ( expression . COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 76
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 56

    (23) expression -> sbvle ( expression . COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 77
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 57

    (28) expression -> bvsub ( expression . COMMA expression COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 78
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 58

    (3) letexpression -> let NAME ASS . expression
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 79

state 59

    (21) expression -> bvge ( expression . COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 80
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 60

    (20) expression -> bvgt ( expression . COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 81
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 61

    (4) letexpression -> letexpression COMMA NAME . ASS expression

    ASS             shift and go to state 82


state 62

    (5) expression -> letexpression in expression .
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for with resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for CONCAT resolved as shift
    COMMA           reduce using rule 5 (expression -> letexpression in expression .)
    )               reduce using rule 5 (expression -> letexpression in expression .)
    endif           reduce using rule 5 (expression -> letexpression in expression .)
    in              reduce using rule 5 (expression -> letexpression in expression .)
    else            reduce using rule 5 (expression -> letexpression in expression .)
    $end            reduce using rule 5 (expression -> letexpression in expression .)
    then            reduce using rule 5 (expression -> letexpression in expression .)
    COLON           reduce using rule 5 (expression -> letexpression in expression .)
    ]               reduce using rule 5 (expression -> letexpression in expression .)
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46

  ! EQ              [ reduce using rule 5 (expression -> letexpression in expression .) ]
  ! [               [ reduce using rule 5 (expression -> letexpression in expression .) ]
  ! with            [ reduce using rule 5 (expression -> letexpression in expression .) ]
  ! AND             [ reduce using rule 5 (expression -> letexpression in expression .) ]
  ! OR              [ reduce using rule 5 (expression -> letexpression in expression .) ]
  ! CONCAT          [ reduce using rule 5 (expression -> letexpression in expression .) ]


state 63

    (15) expression -> expression AND expression .
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           reduce using rule 15 (expression -> expression AND expression .)
    EQ              reduce using rule 15 (expression -> expression AND expression .)
    with            reduce using rule 15 (expression -> expression AND expression .)
    AND             reduce using rule 15 (expression -> expression AND expression .)
    OR              reduce using rule 15 (expression -> expression AND expression .)
    CONCAT          reduce using rule 15 (expression -> expression AND expression .)
    )               reduce using rule 15 (expression -> expression AND expression .)
    endif           reduce using rule 15 (expression -> expression AND expression .)
    in              reduce using rule 15 (expression -> expression AND expression .)
    else            reduce using rule 15 (expression -> expression AND expression .)
    $end            reduce using rule 15 (expression -> expression AND expression .)
    then            reduce using rule 15 (expression -> expression AND expression .)
    COLON           reduce using rule 15 (expression -> expression AND expression .)
    ]               reduce using rule 15 (expression -> expression AND expression .)
    [               shift and go to state 43

  ! [               [ reduce using rule 15 (expression -> expression AND expression .) ]
  ! EQ              [ shift and go to state 44 ]
  ! with            [ shift and go to state 42 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 45 ]
  ! CONCAT          [ shift and go to state 46 ]


state 64

    (12) expression -> expression with [ . expression ] COLONEQ expression
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 83

state 65

    (11) expression -> expression [ expression . COLON expression ]
    (13) expression -> expression [ expression . ]
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COLON           shift and go to state 85
    ]               shift and go to state 84
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 66

    (6) expression -> expression EQ expression .
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           reduce using rule 6 (expression -> expression EQ expression .)
    EQ              reduce using rule 6 (expression -> expression EQ expression .)
    with            reduce using rule 6 (expression -> expression EQ expression .)
    AND             reduce using rule 6 (expression -> expression EQ expression .)
    OR              reduce using rule 6 (expression -> expression EQ expression .)
    CONCAT          reduce using rule 6 (expression -> expression EQ expression .)
    )               reduce using rule 6 (expression -> expression EQ expression .)
    endif           reduce using rule 6 (expression -> expression EQ expression .)
    in              reduce using rule 6 (expression -> expression EQ expression .)
    else            reduce using rule 6 (expression -> expression EQ expression .)
    $end            reduce using rule 6 (expression -> expression EQ expression .)
    then            reduce using rule 6 (expression -> expression EQ expression .)
    COLON           reduce using rule 6 (expression -> expression EQ expression .)
    ]               reduce using rule 6 (expression -> expression EQ expression .)
    [               shift and go to state 43

  ! [               [ reduce using rule 6 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 44 ]
  ! with            [ shift and go to state 42 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 45 ]
  ! CONCAT          [ shift and go to state 46 ]


state 67

    (16) expression -> expression OR expression .
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           reduce using rule 16 (expression -> expression OR expression .)
    EQ              reduce using rule 16 (expression -> expression OR expression .)
    with            reduce using rule 16 (expression -> expression OR expression .)
    AND             reduce using rule 16 (expression -> expression OR expression .)
    OR              reduce using rule 16 (expression -> expression OR expression .)
    CONCAT          reduce using rule 16 (expression -> expression OR expression .)
    )               reduce using rule 16 (expression -> expression OR expression .)
    endif           reduce using rule 16 (expression -> expression OR expression .)
    in              reduce using rule 16 (expression -> expression OR expression .)
    else            reduce using rule 16 (expression -> expression OR expression .)
    $end            reduce using rule 16 (expression -> expression OR expression .)
    then            reduce using rule 16 (expression -> expression OR expression .)
    COLON           reduce using rule 16 (expression -> expression OR expression .)
    ]               reduce using rule 16 (expression -> expression OR expression .)
    [               shift and go to state 43

  ! [               [ reduce using rule 16 (expression -> expression OR expression .) ]
  ! EQ              [ shift and go to state 44 ]
  ! with            [ shift and go to state 42 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 45 ]
  ! CONCAT          [ shift and go to state 46 ]


state 68

    (17) expression -> expression CONCAT expression .
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           reduce using rule 17 (expression -> expression CONCAT expression .)
    EQ              reduce using rule 17 (expression -> expression CONCAT expression .)
    with            reduce using rule 17 (expression -> expression CONCAT expression .)
    AND             reduce using rule 17 (expression -> expression CONCAT expression .)
    OR              reduce using rule 17 (expression -> expression CONCAT expression .)
    CONCAT          reduce using rule 17 (expression -> expression CONCAT expression .)
    )               reduce using rule 17 (expression -> expression CONCAT expression .)
    endif           reduce using rule 17 (expression -> expression CONCAT expression .)
    in              reduce using rule 17 (expression -> expression CONCAT expression .)
    else            reduce using rule 17 (expression -> expression CONCAT expression .)
    $end            reduce using rule 17 (expression -> expression CONCAT expression .)
    then            reduce using rule 17 (expression -> expression CONCAT expression .)
    COLON           reduce using rule 17 (expression -> expression CONCAT expression .)
    ]               reduce using rule 17 (expression -> expression CONCAT expression .)
    [               shift and go to state 43

  ! [               [ reduce using rule 17 (expression -> expression CONCAT expression .) ]
  ! EQ              [ shift and go to state 44 ]
  ! with            [ shift and go to state 42 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 45 ]
  ! CONCAT          [ shift and go to state 46 ]


state 69

    (22) expression -> sbvlt ( expression COMMA . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 86

state 70

    (29) expression -> if expression then expression . else expression endif
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    else            shift and go to state 87
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 71

    (18) expression -> bvlt ( expression COMMA . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 88

state 72

    (27) expression -> bvplus ( expression COMMA . expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 89

state 73

    (24) expression -> sbvgt ( expression COMMA . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 90

state 74

    (19) expression -> bvle ( expression COMMA . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 91

state 75

    (25) expression -> sbvge ( expression COMMA . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 92

state 76

    (26) expression -> bvsx ( expression COMMA . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 93

state 77

    (23) expression -> sbvle ( expression COMMA . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 94

state 78

    (28) expression -> bvsub ( expression COMMA . expression COMMA expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 95

state 79

    (3) letexpression -> let NAME ASS expression .
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    in              reduce using rule 3 (letexpression -> let NAME ASS expression .)
    COMMA           reduce using rule 3 (letexpression -> let NAME ASS expression .)
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 80

    (21) expression -> bvge ( expression COMMA . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 96

state 81

    (20) expression -> bvgt ( expression COMMA . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 97

state 82

    (4) letexpression -> letexpression COMMA NAME ASS . expression
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    expression                     shift and go to state 98
    letexpression                  shift and go to state 22

state 83

    (12) expression -> expression with [ expression . ] COLONEQ expression
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    ]               shift and go to state 99
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 84

    (13) expression -> expression [ expression ] .

    COMMA           reduce using rule 13 (expression -> expression [ expression ] .)
    EQ              reduce using rule 13 (expression -> expression [ expression ] .)
    [               reduce using rule 13 (expression -> expression [ expression ] .)
    with            reduce using rule 13 (expression -> expression [ expression ] .)
    AND             reduce using rule 13 (expression -> expression [ expression ] .)
    OR              reduce using rule 13 (expression -> expression [ expression ] .)
    CONCAT          reduce using rule 13 (expression -> expression [ expression ] .)
    )               reduce using rule 13 (expression -> expression [ expression ] .)
    endif           reduce using rule 13 (expression -> expression [ expression ] .)
    in              reduce using rule 13 (expression -> expression [ expression ] .)
    else            reduce using rule 13 (expression -> expression [ expression ] .)
    $end            reduce using rule 13 (expression -> expression [ expression ] .)
    then            reduce using rule 13 (expression -> expression [ expression ] .)
    COLON           reduce using rule 13 (expression -> expression [ expression ] .)
    ]               reduce using rule 13 (expression -> expression [ expression ] .)


state 85

    (11) expression -> expression [ expression COLON . expression ]
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 100

state 86

    (22) expression -> sbvlt ( expression COMMA expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 101
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 87

    (29) expression -> if expression then expression else . expression endif
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 102

state 88

    (18) expression -> bvlt ( expression COMMA expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 103
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 89

    (27) expression -> bvplus ( expression COMMA expression . COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 104
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 90

    (24) expression -> sbvgt ( expression COMMA expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 105
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 91

    (19) expression -> bvle ( expression COMMA expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 106
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 92

    (25) expression -> sbvge ( expression COMMA expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 107
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 93

    (26) expression -> bvsx ( expression COMMA expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 108
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 94

    (23) expression -> sbvle ( expression COMMA expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 109
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 95

    (28) expression -> bvsub ( expression COMMA expression . COMMA expression )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           shift and go to state 110
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 96

    (21) expression -> bvge ( expression COMMA expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 111
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 97

    (20) expression -> bvgt ( expression COMMA expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 112
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 98

    (4) letexpression -> letexpression COMMA NAME ASS expression .
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    in              reduce using rule 4 (letexpression -> letexpression COMMA NAME ASS expression .)
    COMMA           reduce using rule 4 (letexpression -> letexpression COMMA NAME ASS expression .)
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 99

    (12) expression -> expression with [ expression ] . COLONEQ expression

    COLONEQ         shift and go to state 113


state 100

    (11) expression -> expression [ expression COLON expression . ]
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    ]               shift and go to state 114
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 101

    (22) expression -> sbvlt ( expression COMMA expression ) .

    COMMA           reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    EQ              reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    [               reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    with            reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    AND             reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    OR              reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    CONCAT          reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    )               reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    endif           reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    in              reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    else            reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    $end            reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    then            reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    COLON           reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)
    ]               reduce using rule 22 (expression -> sbvlt ( expression COMMA expression ) .)


state 102

    (29) expression -> if expression then expression else expression . endif
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    endif           shift and go to state 115
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 103

    (18) expression -> bvlt ( expression COMMA expression ) .

    COMMA           reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    EQ              reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    [               reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    with            reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    AND             reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    OR              reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    CONCAT          reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    )               reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    endif           reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    in              reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    else            reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    $end            reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    then            reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    COLON           reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)
    ]               reduce using rule 18 (expression -> bvlt ( expression COMMA expression ) .)


state 104

    (27) expression -> bvplus ( expression COMMA expression COMMA . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 116

state 105

    (24) expression -> sbvgt ( expression COMMA expression ) .

    COMMA           reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    EQ              reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    [               reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    with            reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    AND             reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    OR              reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    CONCAT          reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    )               reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    endif           reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    in              reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    else            reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    $end            reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    then            reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    COLON           reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)
    ]               reduce using rule 24 (expression -> sbvgt ( expression COMMA expression ) .)


state 106

    (19) expression -> bvle ( expression COMMA expression ) .

    COMMA           reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    EQ              reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    [               reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    with            reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    AND             reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    OR              reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    CONCAT          reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    )               reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    endif           reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    in              reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    else            reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    $end            reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    then            reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    COLON           reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)
    ]               reduce using rule 19 (expression -> bvle ( expression COMMA expression ) .)


state 107

    (25) expression -> sbvge ( expression COMMA expression ) .

    COMMA           reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    EQ              reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    [               reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    with            reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    AND             reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    OR              reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    CONCAT          reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    )               reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    endif           reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    in              reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    else            reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    $end            reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    then            reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    COLON           reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)
    ]               reduce using rule 25 (expression -> sbvge ( expression COMMA expression ) .)


state 108

    (26) expression -> bvsx ( expression COMMA expression ) .

    COMMA           reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    EQ              reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    [               reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    with            reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    AND             reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    OR              reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    CONCAT          reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    )               reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    endif           reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    in              reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    else            reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    $end            reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    then            reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    COLON           reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)
    ]               reduce using rule 26 (expression -> bvsx ( expression COMMA expression ) .)


state 109

    (23) expression -> sbvle ( expression COMMA expression ) .

    COMMA           reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    EQ              reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    [               reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    with            reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    AND             reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    OR              reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    CONCAT          reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    )               reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    endif           reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    in              reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    else            reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    $end            reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    then            reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    COLON           reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)
    ]               reduce using rule 23 (expression -> sbvle ( expression COMMA expression ) .)


state 110

    (28) expression -> bvsub ( expression COMMA expression COMMA . expression )
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 117

state 111

    (21) expression -> bvge ( expression COMMA expression ) .

    COMMA           reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    EQ              reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    [               reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    with            reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    AND             reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    OR              reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    CONCAT          reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    )               reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    endif           reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    in              reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    else            reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    $end            reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    then            reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    COLON           reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)
    ]               reduce using rule 21 (expression -> bvge ( expression COMMA expression ) .)


state 112

    (20) expression -> bvgt ( expression COMMA expression ) .

    COMMA           reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    EQ              reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    [               reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    with            reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    AND             reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    OR              reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    CONCAT          reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    )               reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    endif           reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    in              reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    else            reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    $end            reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    then            reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    COLON           reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)
    ]               reduce using rule 20 (expression -> bvgt ( expression COMMA expression ) .)


state 113

    (12) expression -> expression with [ expression ] COLONEQ . expression
    (2) expression -> . NAME
    (5) expression -> . letexpression in expression
    (6) expression -> . expression EQ expression
    (7) expression -> . ( expression )
    (8) expression -> . NUMBER
    (9) expression -> . HEX
    (10) expression -> . BIN
    (11) expression -> . expression [ expression COLON expression ]
    (12) expression -> . expression with [ expression ] COLONEQ expression
    (13) expression -> . expression [ expression ]
    (14) expression -> . not expression
    (15) expression -> . expression AND expression
    (16) expression -> . expression OR expression
    (17) expression -> . expression CONCAT expression
    (18) expression -> . bvlt ( expression COMMA expression )
    (19) expression -> . bvle ( expression COMMA expression )
    (20) expression -> . bvgt ( expression COMMA expression )
    (21) expression -> . bvge ( expression COMMA expression )
    (22) expression -> . sbvlt ( expression COMMA expression )
    (23) expression -> . sbvle ( expression COMMA expression )
    (24) expression -> . sbvgt ( expression COMMA expression )
    (25) expression -> . sbvge ( expression COMMA expression )
    (26) expression -> . bvsx ( expression COMMA expression )
    (27) expression -> . bvplus ( expression COMMA expression COMMA expression )
    (28) expression -> . bvsub ( expression COMMA expression COMMA expression )
    (29) expression -> . if expression then expression else expression endif
    (3) letexpression -> . let NAME ASS expression
    (4) letexpression -> . letexpression COMMA NAME ASS expression

    NAME            shift and go to state 20
    (               shift and go to state 10
    NUMBER          shift and go to state 3
    HEX             shift and go to state 15
    BIN             shift and go to state 6
    not             shift and go to state 18
    bvlt            shift and go to state 7
    bvle            shift and go to state 11
    bvgt            shift and go to state 21
    bvge            shift and go to state 19
    sbvlt           shift and go to state 4
    sbvle           shift and go to state 14
    sbvgt           shift and go to state 9
    sbvge           shift and go to state 12
    bvsx            shift and go to state 13
    bvplus          shift and go to state 8
    bvsub           shift and go to state 16
    if              shift and go to state 5
    let             shift and go to state 17

    letexpression                  shift and go to state 22
    expression                     shift and go to state 118

state 114

    (11) expression -> expression [ expression COLON expression ] .

    COMMA           reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    EQ              reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    [               reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    with            reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    AND             reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    OR              reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    CONCAT          reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    )               reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    endif           reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    in              reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    else            reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    $end            reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    then            reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    COLON           reduce using rule 11 (expression -> expression [ expression COLON expression ] .)
    ]               reduce using rule 11 (expression -> expression [ expression COLON expression ] .)


state 115

    (29) expression -> if expression then expression else expression endif .

    COMMA           reduce using rule 29 (expression -> if expression then expression else expression endif .)
    EQ              reduce using rule 29 (expression -> if expression then expression else expression endif .)
    [               reduce using rule 29 (expression -> if expression then expression else expression endif .)
    with            reduce using rule 29 (expression -> if expression then expression else expression endif .)
    AND             reduce using rule 29 (expression -> if expression then expression else expression endif .)
    OR              reduce using rule 29 (expression -> if expression then expression else expression endif .)
    CONCAT          reduce using rule 29 (expression -> if expression then expression else expression endif .)
    )               reduce using rule 29 (expression -> if expression then expression else expression endif .)
    endif           reduce using rule 29 (expression -> if expression then expression else expression endif .)
    in              reduce using rule 29 (expression -> if expression then expression else expression endif .)
    else            reduce using rule 29 (expression -> if expression then expression else expression endif .)
    $end            reduce using rule 29 (expression -> if expression then expression else expression endif .)
    then            reduce using rule 29 (expression -> if expression then expression else expression endif .)
    COLON           reduce using rule 29 (expression -> if expression then expression else expression endif .)
    ]               reduce using rule 29 (expression -> if expression then expression else expression endif .)


state 116

    (27) expression -> bvplus ( expression COMMA expression COMMA expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 119
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 117

    (28) expression -> bvsub ( expression COMMA expression COMMA expression . )
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    )               shift and go to state 120
    EQ              shift and go to state 44
    [               shift and go to state 43
    with            shift and go to state 42
    AND             shift and go to state 41
    OR              shift and go to state 45
    CONCAT          shift and go to state 46


state 118

    (12) expression -> expression with [ expression ] COLONEQ expression .
    (6) expression -> expression . EQ expression
    (11) expression -> expression . [ expression COLON expression ]
    (12) expression -> expression . with [ expression ] COLONEQ expression
    (13) expression -> expression . [ expression ]
    (15) expression -> expression . AND expression
    (16) expression -> expression . OR expression
    (17) expression -> expression . CONCAT expression

    COMMA           reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    EQ              reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    [               reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    with            reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    AND             reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    OR              reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    CONCAT          reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    )               reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    endif           reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    in              reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    else            reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    $end            reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    then            reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    COLON           reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)
    ]               reduce using rule 12 (expression -> expression with [ expression ] COLONEQ expression .)

  ! EQ              [ shift and go to state 44 ]
  ! [               [ shift and go to state 43 ]
  ! with            [ shift and go to state 42 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 45 ]
  ! CONCAT          [ shift and go to state 46 ]


state 119

    (27) expression -> bvplus ( expression COMMA expression COMMA expression ) .

    COMMA           reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    EQ              reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    [               reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    with            reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    AND             reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    OR              reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    CONCAT          reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    )               reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    endif           reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    in              reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    else            reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    $end            reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    then            reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    COLON           reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)
    ]               reduce using rule 27 (expression -> bvplus ( expression COMMA expression COMMA expression ) .)


state 120

    (28) expression -> bvsub ( expression COMMA expression COMMA expression ) .

    COMMA           reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    EQ              reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    [               reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    with            reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    AND             reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    OR              reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    CONCAT          reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    )               reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    endif           reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    in              reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    else            reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    $end            reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    then            reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    COLON           reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)
    ]               reduce using rule 28 (expression -> bvsub ( expression COMMA expression COMMA expression ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQ in state 62 resolved as shift
WARNING: shift/reduce conflict for [ in state 62 resolved as shift
WARNING: shift/reduce conflict for with in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 62 resolved as shift
